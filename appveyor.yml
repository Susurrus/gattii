# Appveyor configuration template for Rust using rustup for Rust installation
# https://github.com/starkat99/appveyor-rust

## Operating System (VM environment) ##

# Rust needs at least Visual Studio 2013 Appveyor OS for MSVC targets.
os: Visual Studio 2015

## Build Matrix ##

# This configuration will setup a build for each channel & target combination (12 windows
# combinations in all).
#
# There are 3 channels: stable, beta, and nightly.
#
# Alternatively, the full version may be specified for the channel to build using that specific
# version (e.g. channel: 1.5.0)
#
# The values for target are the set of windows Rust build targets. Each value is of the form
#
# ARCH-pc-windows-TOOLCHAIN
#
# Where ARCH is the target architecture, either x86_64 or i686, and TOOLCHAIN is the linker
# toolchain to use, either msvc or gnu. See https://www.rust-lang.org/downloads.html#win-foot for
# a description of the toolchain differences.
# See https://github.com/rust-lang-nursery/rustup.rs/#toolchain-specification for description of
# toolchains and host triples.
#
# Comment out channel/target combos you do not wish to build in CI.
#
# You may use the `cargoflags` and `RUSTFLAGS` variables to set additional flags for cargo commands
# and rustc, respectively. For instance, you can uncomment the cargoflags lines in the nightly
# channels to enable unstable features when building for nightly. Or you could add additional
# matrix entries to test different combinations of features.
environment:
  matrix:

### MSVC Toolchains ###

# The MSVC toolchain is not supported for this program right now

### GNU Toolchains ###

  # Stable 64-bit GNU
    - channel: stable
      platform: x64
      target: x86_64-pc-windows-gnu
      configuration: Debug
      BITS: 64
  # Stable 32-bit GNU
    - channel: stable
      platform: x86
      target: i686-pc-windows-gnu
      configuration: Debug
      BITS: 32
  # Nightly 64-bit GNU
    - channel: nightly
      platform: x64
      target: x86_64-pc-windows-gnu
      configuration: Debug
      BITS: 64
  # Nightly 32-bit GNU
    - channel: nightly
      platform: x86
      target: i686-pc-windows-gnu
      configuration: Debug
      BITS: 32
  # Stable 64-bit GNU (release & package)
    - channel: stable
      platform: x64
      target: x86_64-pc-windows-gnu
      configuration: Release
      BITS: 64
      PACKAGE: true
  # Stable 32-bit GNU (release & package)
    - channel: stable
      platform: x86
      target: i686-pc-windows-gnu
      configuration: Release
      BITS: 32
      PACKAGE: true

### Allowed failures ###

# See Appveyor documentation for specific details. In short, place any channel or targets you wish
# to allow build failures on (usually nightly at least is a wise choice). This will prevent a build
# or test failure in the matching channels/targets from failing the entire build.
matrix:
  allow_failures:
    - channel: nightly

## Install Script ##

# This is the most important part of the Appveyor configuration. This installs the version of Rust
# specified by the 'channel' and 'target' environment variables from the build matrix. This uses
# rustup to install Rust.
#
# For simple configurations, instead of using the build matrix, you can simply set the
# default-toolchain and default-host manually here.
install:
  - IF "%BITS%" == "32" SET ARCH=i686
  - IF "%BITS%" == "64" SET ARCH=x86_64
  - appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe
  - rustup-init -yv --default-toolchain %channel% --default-host %target%
  - set PATH=C:\msys64\mingw%BITS%\bin;C:\msys64\usr\bin;%USERPROFILE%\.cargo\bin;%PATH%
  - rustc -vV
  - cargo -vV
  - pacman --noconfirm -S mingw-w64-%ARCH%-gtk3 mingw-w64-%ARCH%-adwaita-icon-theme

## Build Script ##

# Build the project using optimizations and removing the console when in release mode
build_script:
  - if "%configuration%"=="Release" (
      cargo rustc --release --bin gattii -- -C link-args=-mwindows
    ) else (
      cargo build
    )

# There are no tests, so don't bother running a test stage
test: false

# Package after building is successful. We use 7zip in an after_build section
# instead of in artifacts because artifacts doesn't allow for manipulating
# the resultant directory path in the archive
after_build:
  - if "%PACKAGE%"=="true" ( mkdir share\icons )
  - if "%PACKAGE%"=="true" ( cp -r C:\msys64\mingw%BITS%\share\icons\Adwaita share\icons )
  - if "%PACKAGE%"=="true" ( mkdir share\glib-2.0\schemas )
  - if "%PACKAGE%"=="true" ( cp C:\msys64\mingw%BITS%\share\glib-2.0\schemas\org.gtk.Settings.FileChooser.gschema.xml share\glib-2.0\schemas )
  - if "%PACKAGE%"=="true" ( glib-compile-schemas share\glib-2.0\schemas )
  - if "%PACKAGE%"=="true" ( 7z a gattii.zip share )
  - if "%PACKAGE%"=="true" ( ldd target\release\gattii.exe )
  - if "%PACKAGE%"=="true" ( ldd target\release\gattii.exe | awk -F"[ ]+" "/mingw/{ gsub(/^\t/,\"\",$1); print \"C:\\\\msys64\\\\mingw%BITS%\\\\bin\\\\\"$1 }" | uniq -u > dlls.txt )
  - if "%PACKAGE%"=="true" ( 7z a gattii.zip -i@dlls.txt )
  - if "%PACKAGE%"=="true" ( 7z a gattii.zip %APPVEYOR_BUILD_FOLDER%\target\release\gattii.exe )
  - if "%PACKAGE%"=="true" ( 7z a gattii.zip resources )
  - if "%PACKAGE%"=="true" ( 7z a gattii.zip README.rst )
  - if "%PACKAGE%"=="true" ( 7z a gattii.zip LICENSE.txt )

artifacts:
  - path: gattii.zip
    name: Gattii
